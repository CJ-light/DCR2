using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;
using System;

//Tool that colects information, and when someone closes the application it turns that information into a json file we can use
namespace Info{
    [System.Serializable]
    public class FuzzySchoolControllerInfo : MonoBehaviour{
        //Variables to use so that we can filter and tag our data
        //Testing variables
        public int startRandomAge; //SchoolController 56, default:false
        public int startRandomEnergy; //SchoolController 230, default:true
        //proportion:: This is how much faster the fish is going to age
        public float proportion; 
        //enableRegeneration :: This is to see if you enable regeneration (if the fish should be able to reproduce and create new ones)
        public bool enableRegeneration;
        //fixedAge/fixedAgeValue:: This is to know if the age is never going to get higher and at what point the age is going to be set in (% of total age) [0,1]
        public int fixedAge;
        public float fixedAgeValue;
        //fixedEnergy/fixedEnergyValue:: This is to know if the energy is never going to get higher and at what point the energy is going to be set in (% of total energy)[0,1]
        public int fixedEnergy;
        public float fixedEnergyValue;

        //Selecting different models
        public int isFuzzyAge;
        public int isFuzzyEnergy;

        //Selecting different Rules:
        public int swimmingDepthRules2;
        public int centroidFollowingDirectionWeightRules2;
        public int couzinDirectionWeightRules2;

        //How long the game is going to be played
        public string testName;
        public static int gameDuration;
        //SchoolID::Id of the school, generated by te FuzzySchoolController
        public int SchoolID;
        //min speed of that school
        public float minSpeed;
        //Max Speed of that school
        public float maxSpeed;
        //CurrentDateAndTime
        public System.DateTime currentTime = System.DateTime.Now;
        public List<float> avgSpeeds = new List<float>();
        public List<float> avgCentroidDistance = new List<float>();

        //Age Count lists
        public List<int> ageFryCount = new List<int>();
        public List<int> ageYoungCount = new List<int>();
        public List<int> ageAdultCount = new List<int>();
        public List<int> ageOldCount = new List<int>();

        //Energy Count lists
        public List<int> energyLowCount = new List<int>();
        public List<int> energyMediumCount = new List<int>();
        public List<int> energyHighCount = new List<int>();

        //Swimming Depth Count list
        public List<int> swimmingDepthLowCount = new List<int>();
        public List<int> swimmingDepthMediumCount = new List<int>();
        public List<int> swimmingDepthHighCount = new List<int>();
        public List<int> swimmingDepthVeryHighCount = new List<int>();

        //Centroid Following Direction Weight list
        public List<int> centroidFollowingDirectionWeightLowCount = new List<int>();
        public List<int> centroidFollowingDirectionWeightMediumCount = new List<int>();
        public List<int> centroidFollowingDirectionWeightHighCount = new List<int>();

        //Couzin Direction Weight list
        public List<int> couzinDirectionWeightLowCount = new List<int>();
        public List<int> couzinDirectionWeightMediumCount = new List<int>();
        public List<int> couzinDirectionWeightHighCount = new List<int>();


        //Test dictionary
        public Dictionary<string,int> dictExample = new Dictionary<string,int>(){
                                                                                {"Low",0},
                                                                                {"Medium",0},
                                                                                {"High",0}
                                                                                };
        //time since the game started (seconds)
        public List<float> realTimesSinceStartUp = new List<float>();
        //Time.realtimeSinceStartup

        int curTest;

        public FuzzySchoolControllerInfo(int paramSchoolID, float paramMinSpeed, float paramMaxSpeed, int paramLifeExpectation)
        {
            minSpeed = paramMinSpeed;
            maxSpeed = paramMaxSpeed;
            SchoolID = paramSchoolID;
            testName = "Test2_AgeAndEnergy_Set_Random_Fuzzy";
            gameDuration = 120;
            proportion = paramLifeExpectation/gameDuration;
            enableRegeneration = false;
            //Fix values 
            fixedAge = 0;
            fixedAgeValue = 0.2f;
            fixedEnergy = 0;
            fixedEnergyValue = 0.2f;
            //Start Random values
            startRandomEnergy = 1;
            startRandomAge = 1;
            //Change models
            isFuzzyAge = 1;
            isFuzzyEnergy = 1;
            //Change rules
            swimmingDepthRules2 = 0;
            centroidFollowingDirectionWeightRules2 = 0;
            couzinDirectionWeightRules2 = 0;
            StartMyCoroutine();
        
            //Block of code that turns a number into binary and pads it with 0's if necesary, this way we can atomize the test that we're making in the script.
            //If we assume that each binary character is a true/false statement then we can make this script change the values based on each of those statements.
            //In our case we want to test all possible scenarios with 4 different things ['random ages'/'no random age', 'random initial energy'/'no random initial energy','fuzzy Age'/'no fuzzy Age', 'fuzzy Energy'/'No fuzzy Energy'], and so when we give a number like '4' it will return to us a binary string like '0100' which in this example would mean that everything is false except the random initial energy
            //curTest :: This is current test that you want to do
            //options :: This is the amount of things we want to check, right now its 4
            //max :: This is the maximum number of unique combinations we can have with those options
            //binary :: This is thw binary representation of the curTest number + left filler until the amount of binary characters is equal to the number of options that we chose
            curTest = 8;
            int options = 3;
            int max = Convert.ToInt32(Math.Pow(2,options));
            string binary = Convert.ToString(curTest, 2).PadLeft(Convert.ToInt32(Math.Floor(Math.Sqrt(max))), '0');

            //Go through the binary string and set the values of each variable in order
            for (var i = 0; i < binary.Length; i++){
                switch (i){
                    case 0:
                        swimmingDepthRules2 = binary[i].Equals('1') ? 1 : 0;
                        break;
                    case 1:
                        centroidFollowingDirectionWeightRules2 = binary[i].Equals('1') ? 1 : 0;
                        break;
                    case 2:
                        couzinDirectionWeightRules2 = binary[i].Equals('1') ? 1 : 0;
                        break;
                }
                //options[i] = binary[i].Equals('1') ? 1 : 0;
            }
            EditorApplication.playModeStateChanged += SaveToString; //Registering the playModeStateChange event so that it runs the LogPlayModeState function each time it changes.
        }

        public static void StartMyCoroutine() {
            GameObject obj = new GameObject();
            obj.AddComponent<FuzzySchoolControllerInfo>().StartCoroutine(MyCoroutine(obj));
        }

        static IEnumerator MyCoroutine(GameObject obj) {


            //yield on a new YieldInstruction that waits for gameDuration seconds.
            yield return new WaitForSeconds(gameDuration);
            
            //Shuts down the application after waiting
            EditorApplication.isPlaying = false;

            GameObject.Destroy(obj);
        }

        public void addAvgSpeed(float paramAvgSpeed)
        {
            avgSpeeds.Add(paramAvgSpeed);
            realTimesSinceStartUp.Add(Time.realtimeSinceStartup);
        }

        public void addAvgCentroidDistance(float paramAvgCentroidDistance){
            avgCentroidDistance.Add(paramAvgCentroidDistance);
        }

        public void addAgeTypeCount(Dictionary<string, int> paramAgeTypeCount)
        {
            ageFryCount.Add(paramAgeTypeCount["Fry"]);
            ageYoungCount.Add(paramAgeTypeCount["Young"]);
            ageAdultCount.Add(paramAgeTypeCount["Adult"]);
            ageOldCount.Add(paramAgeTypeCount["Old"]);
            //Debug.Log(paramAgeTypeCount);
        }

        public void addEnergyTypeCount(Dictionary<string,int> paramEnergyTypeCount){
            energyLowCount.Add(paramEnergyTypeCount["Low"]);
            energyMediumCount.Add(paramEnergyTypeCount["Medium"]);
            energyHighCount.Add(paramEnergyTypeCount["High"]);
        }

        public void addSwimmingDepthTypeCount(Dictionary<string,int> paramSwimmingDepthTypeCount){
            swimmingDepthLowCount.Add(paramSwimmingDepthTypeCount["Low"]);
            swimmingDepthMediumCount.Add(paramSwimmingDepthTypeCount["Medium"]);
            swimmingDepthHighCount.Add(paramSwimmingDepthTypeCount["High"]);
            swimmingDepthVeryHighCount.Add(paramSwimmingDepthTypeCount["VeryHigh"]);
        }
        public void addCentroidFollowingDirectionWeightTypeCount(Dictionary<string,int> paramCentroidFollowingDirectionWeightTypeCount){
            centroidFollowingDirectionWeightLowCount.Add(paramCentroidFollowingDirectionWeightTypeCount["Low"]);
            centroidFollowingDirectionWeightMediumCount.Add(paramCentroidFollowingDirectionWeightTypeCount["Medium"]);
            centroidFollowingDirectionWeightHighCount.Add(paramCentroidFollowingDirectionWeightTypeCount["High"]);
        }

        public void addCouzinDirectionWeightTypeCount(Dictionary<string,int> paramCouzinDirectionWeightTypeCount){
            couzinDirectionWeightLowCount.Add(paramCouzinDirectionWeightTypeCount["Low"]);
            couzinDirectionWeightMediumCount.Add(paramCouzinDirectionWeightTypeCount["Medium"]);
            couzinDirectionWeightHighCount.Add(paramCouzinDirectionWeightTypeCount["High"]);
        }

        public void SaveToString(PlayModeStateChange state){
            if (state == PlayModeStateChange.ExitingPlayMode){
                string json = JsonUtility.ToJson(this);
                System.IO.File.WriteAllText(Application.persistentDataPath + "/" + testName + "/" + currentTime.ToString("yyyy-MM-dd_HHmmss") + "-" + SchoolID + ".json", json); //Persistent data path is the path where you will store stuff that will always stay there throughout sessions
                Debug.Log("Exiting Play Mode");
                Debug.Log("Finished test #" + curTest);
            }
        }
    }

}
